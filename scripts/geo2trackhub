#!/usr/bin/env python
import argparse
import glob
import os
import pp
import re
import sys
import yaml

from geo2fastq.config import VERSION
from geo2fastq import Geo
from geo2fastq.convert import fastq2bam, bam2bw
from geo2fastq import config

MAXCPU = 4

description = """
geo2fastq v{0}
""".format(VERSION)

p = argparse.ArgumentParser(
                           description=description,
                           )
p.add_argument("term",
               help="GEO search term (accession)",
               metavar="TERM"
               )
p.add_argument("-d", "--download",
               dest="download",
               help="Download data from GEO. If this option is not specified, only show metadata.",
               action="store_true",
               default=False,
               )

args = p.parse_args()

download = args.download
search_term = args.term

keep = {
    "sra": True,
    "bam": True,
    "fastq": True,
    "bw": True
}

config = config.config()

for gse, info in Geo.search(search_term).items():
    print "{0}\t{1}".format(gse, info['title'])
    for gsm,title in info['samples'].items():
        print "  {0}\t{1}".format(gsm, title)
    
    if download:
        job_server = pp.Server()
        if job_server.get_ncpus() > MAXCPU:
            job_server.set_ncpus(MAXCPU)
        g = Geo(gse)
        g.download()

        jobs = []
        for gsm,sample in g.samples.items():
            print sample
            sys.exit()
            #print sample                
            fqs = glob.glob(os.path.join(gse, "*{0}*.fq.gz".format(sample['gsm'])))
            #print fqs
            name = re.sub(r'[^a-zA-Z1-9_-]', "", sample['name'])
            bam = os.path.join(gse, "{0}.{1}.bam".format(sample['gsm'], name))
            
            # Mapping the fastq file
            aligner = config['aligner'].setdefault(sample['library'], config['aligner']['default'])
            genome_dir = config['genome_dir']
            try:
                genome = config['genome_build'][sample['tax_id']]
            except:
                sys.stderr.write("No genome_build specified for tax_id {0}".format(sample['tax_id']))
                sys.exit(1)
            
            sys.stderr.write("Mapping {0} to {1} with {3} to {4} -> {2}\n".format(
                                                                sample['gsm'],
                                                                sample['genome'],
                                                                bam,
                                                                aligner,
                                                                genome,
                                                                )
                                                                )
            fastq2bam(fqs, bam, sample['genome'], aligner=aligner, genome_dir=genome_dir) 
            bw = bam.replace(".bam", ".bw")
            job = job_server.submit(bam2bw, (bam, bw), (), ("subprocess", ))
            jobs.append(job)

        for job in jobs:
            stdout, stderr = job()
#            #if stderr:
#            #    sys.stderr.write("bam2bw failed\n")
#            #    sys.stderr.write("{0}\n".format(stderr))
#
#        create_hub(gse, samples, "/home/simon/dat/trackhubs", "simon", "localhost", "s.vanheeringen@ncmls.ru.nl")
#

