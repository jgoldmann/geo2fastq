#!/usr/bin/env python
import argparse
import sys
import os

from geo2fastq.config import VERSION
from geo2fastq import Geo

description = """
geo2fastq v{0}
""".format(VERSION)

p = argparse.ArgumentParser(
                           description=description,
                           )
p.add_argument("term",
               help="GEO search term (accession)",
               metavar="TERM"
               )
p.add_argument("-d", "--download",
               dest="download",
               help="Download data from GEO. If this option is not specified, only show metadata.",
               action="store_true",
               default=False,
               )

args = p.parse_args()

download = args.download
search_term = args.term

keep = {
    "sra": True,
    "bam": True,
    "fastq": True,
    "bw": True
}

for gse, info in Geo.search(search_term):
    print "{0}\t{1}".format(gse, info['title'])
    for gsm,title in info['samples'].items():
        print "  {0}\t{1}".format(gsm, title)
    
    if download:
        g = Geo(gse)
        g.download()

        jobs = []
        for sample in samples:
            sample['genome'] = tax2genome[sample['tax_id']]
            genome = sample['genome']
            if genome: 
                bams = []
                fqs = glob.glob(os.path.join(gse, "*{0}*.fq.gz".format(sample['gsm'])))
                for fq in fqs:
                    bam = fq.replace(".fq.gz", "")
                    cmd = ALIGN_CMD.format(fq, bam, genome)
                    sys.stderr.write("Mapping {0} to {1}\n".format(fq, genome))
                    p = sp.Popen(cmd, shell=True, stderr=sp.PIPE, stdout=sp.PIPE)
                    stdout, stderr = p.communicate()
                    if not os.path.exists("{0}.bam".format(bam)):
                        sys.stderr.write("Alignment failed\n")
                        sys.stderr.write(stderr)
                        sys.exit(1)
                    bams.append("{0}.bam".format(bam))
                bam = os.path.join(gse, "{0}.bam".format(sample['gsm']))
                if len(bams) == 1:
                    os.rename(bams[0], bam)
                    os.rename(bams[0] + ".bai", bam + ".bai")
                elif len(bams) > 1:
                    cmd = "{0} merge {1} {2} && samtools index {1}".format(
                                                    "samtools",
                                                    bam,
                                                    " ".join(bams),
                                                    )
                    ret = sp.call(cmd, shell=True)
                    if not ret:
                        for bamfile in bams:
                            os.unlink(bamfile)

                bw = bam.replace(".bam", ".bw")
                job = job_server.submit(bam2bw, (bam, bw), (), ("subprocess", ))
                jobs.append(job)
            else:
                sys.stderr.write("No genome found for tax_id {0}".format(sample['tax_id']))
        for job in jobs:
            stdout, stderr = job()
            #if stderr:
            #    sys.stderr.write("bam2bw failed\n")
            #    sys.stderr.write("{0}\n".format(stderr))

        create_hub(gse, samples, "/home/simon/dat/trackhubs", "simon", "localhost", "s.vanheeringen@ncmls.ru.nl")


